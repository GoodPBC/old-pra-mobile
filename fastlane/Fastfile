# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version '2.64.1'

default_platform :ios

platform :ios do

  desc 'Staging Builds'
  lane :staging do
    version_number = get_version_number(
      xcodeproj: './ios/ProviderResponseApp.xcodeproj'
    )
    latest_build_number = latest_testflight_build_number(
      version: version_number
    )
    build_number = latest_build_number + 1
    update_app_identifier(
      xcodeproj: './ios/ProviderResponseApp.xcodeproj',
      plist_path: 'ProviderResponseApp/Info.plist',
      app_identifier: 'gov.nyc.dhs.providerresponse.staging'
    )
    cert
    sigh(app_identifier: 'gov.nyc.dhs.providerresponse.staging')
    increment_build_number(
      build_number: build_number,
      xcodeproj: './ios/ProviderResponseApp.xcodeproj'
    )
    add_badge(
      glob: "/ios/ProviderResponseApp/Images.xcassets/AppIcon.appiconset/*.{png,PNG}",
      shield: "Staging-#{build_number}-brightgreen",
      no_badge: true
    )
    gym(
      clean: true,
      scheme: 'ProviderResponseApp-Staging',
      #project: './ios/ProviderResponseApp.xcodeproj',
      workspace: './ios/ProviderResponseApp.xcworkspace',
    )
    sh 'git checkout -- ../ios/ProviderResponseApp/Images.xcassets'
    pilot(
      skip_waiting_for_build_processing: true,
      app_identifier: 'gov.nyc.dhs.providerresponse.staging'
    )
  end

  desc 'Beta Builds'
  lane :beta do
    version_number = get_version_number(
      xcodeproj: './ios/ProviderResponseApp.xcodeproj'
    )
    latest_build_number = latest_testflight_build_number(
      version: version_number
    )
    build_number = latest_build_number + 1
    update_app_identifier(
      xcodeproj: './ios/ProviderResponseApp.xcodeproj',
      plist_path: 'ProviderResponseApp/Info.plist',
      app_identifier: 'gov.nyc.dhs.providerresponse'
    )
    cert
    sigh(app_identifier: 'gov.nyc.dhs.providerresponse')
    increment_build_number(
      build_number: build_number,
      xcodeproj: './ios/ProviderResponseApp.xcodeproj'
    )
    gym(
      clean: true,
      scheme: 'ProviderResponseApp-Production',
      # project: './ios/ProviderResponseApp.xcodeproj'
      workspace: './ios/ProviderResponseApp.xcworkspace',
    )
    pilot(skip_waiting_for_build_processing: true)
  end
end

platform :android do
  desc 'Android Staging Build'
  lane :staging do
    version_code_a = google_play_track_version_codes(track: 'alpha')[0] || 0
    version_code_b = google_play_track_version_codes(track: 'beta')[0] || 0
    version_code = [version_code_a, version_code_b].max + 1

    gradle(
      project_dir: 'android',
      task: 'assemble',
      build_type: 'ReleaseStaging',
      properties: {
        versionCode: version_code
      }
    )

    supply(
      track: 'alpha',
      apk: './android/app/build/outputs/apk/app-releaseStaging.apk'
    )
  end

  desc 'Android Beta Build'
  lane :beta do
    version_code_a = google_play_track_version_codes(track: 'alpha')[0] || 0
    version_code_b = google_play_track_version_codes(track: 'beta')[0] || 0
    version_code = [version_code_a, version_code_b].max + 1

    gradle(
      project_dir: 'android',
      task: 'assemble',
      build_type: 'Release',
      properties: {
        versionCode: version_code
      }
    )

    supply(
      track: 'beta',
      apk: './android/app/build/outputs/apk/app-release.apk'
    )
  end
end
